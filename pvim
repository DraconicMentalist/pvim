#!/usr/bin/env sh

# Get the path to pvim
export PVIM="$(dirname "$(readlink -e -- "$0")")"

downloadAppimage() {
  if $appimageNeeded && [ "$imageLocation" = "$PVIM/nvide.appimage" ]; then
    appimageNeeded=false
    echo "Downloading latest Neovim"
    [ -f "$imageLocation" ] && rm "$imageLocation"
    curl -Lo "$imageLocation" https://github.com/neovide/neovide/releases/download/0.15.0/neovide.AppImage && chmod u+x "$imageLocation"
  fi
}

updatepvim() {
  echo "Updating pvim"
  git --git-dir="$PVIM/.git" --work-tree="$PVIM" pull

  echo "Updating the config"
  git --git-dir="$PVIM/config/.git" --work-tree="$PVIM/config" pull

  if [ "$neovide" != "neovide" ]; then
    downloadAppimage
  fi
}

dashU=false
dashF=false
imageLocation="$PVIM/neovide.appimage"
dashH=false
optrem=1
while getopts ':ui:fh' opts; do
  case $opts in
    u)
      dashU=true
      ;;
    f)
      dashF=true
      ;;
    i)
      imageLocation="$OPTARG"
      ;;
    h)
      dashH=true
      ;;
    --)
      break
      ;;
    *)
      #Don't shift options that are meant for neovide
      optrem=$((optrem+1))
      ;;
  esac
done
shift $((OPTIND-optrem))

# Determine what Neovim to use
if [ -f "$imageLocation" ]; then
  neovide="$imageLocation"
elif command -v neovide > /dev/null && ! $dashF; then
  neovide="neovide"
else
  downloadAppimage
  neovide="$imageLocation"
fi

if $dashH; then
  echo "Usage:
  pvim [options] [neovimOptions]  Edit a file as your would with Neovim

Options:
  --                    Pass all following arguments to Neovim

  -u                    Update pvim, config(if git), and the appimage(if in use)
  -f                    Force the use of appimage over installed neovide
  -i <appimage>         specify the image path

Use \"pvim -- -h\" to see neovim help"
  exit
fi


if $dashU; then
  updatepvim
fi

#run Neovim with the local files
exec "$neovide" -- --clean -i "$PVIM/clutter/shada/state" -u "$PVIM/pvim.lua" "$@"
